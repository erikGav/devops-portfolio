services:
  app:
    container_name: app
    image: ${ECR_REGISTRY_URL}/erik/${IMAGE_NAME}:${VERSION:-latest}
    profiles:
      - "app"
    env_file:
      - .app.env
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:5000/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network
      - frontend-network
    restart: unless-stopped

  mysql:
    container_name: mysql
    image: mysql:9.3.0
    profiles:
      - "app"
    env_file:
      - .app.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysql -u $${MYSQL_USER} -p$${MYSQL_PASSWORD} -e 'SELECT 1'",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - mysql_data_volume:/var/lib/mysql
    networks:
      - backend-network
    restart: unless-stopped

  nginx:
    container_name: nginx
    image: ${ECR_REGISTRY_URL}/erik/nginx:stable-alpine3.21-static
    profiles:
      - "app"
    ports:
      - "80:80"
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - frontend-network
    restart: unless-stopped

  unit-test:
    image: ${ECR_REGISTRY_URL}/erik/chat-app-test:${VERSION:-latest}
    profiles:
      - "unit-test"

  e2e-test:
    image: ${ECR_REGISTRY_URL}/erik/chat-app-test:${VERSION:-latest}
    profiles:
      - "e2e-test"
    command: ["python", "tests/test_e2e.py"]
    networks:
      - frontend-network

networks:
  frontend-network:
    name: chatapp-frontend-network
  backend-network:
    name: chatapp-backend-network

volumes:
  mysql_data_volume:
    name: mysql_data_volume
